"""
–ó–∞–¥–∞–Ω–∏–µ 1
üìå –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥—É–ª—å logging –¥–ª—è
–≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —Ñ–∞–π–ª.
üìå –ù–∞–ø—Ä–∏–º–µ—Ä –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å.
"""

import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: –æ—à–∏–±–∫–∏ –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª error.log
logging.basicConfig(
    filename='error.log',
    level=logging.ERROR,
    format='%(asctime)s %(levelname)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

def divide(a, b):
    """
    –î–µ–ª–∏—Ç a –Ω–∞ b, –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ –Ω–∞ –Ω–æ–ª—å –ª–æ–≥–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
    """
    try:
        return a / b
    except ZeroDivisionError as e:
        logging.error("–û—à–∏–±–∫–∞ –¥–µ–ª–µ–Ω–∏—è: –ø–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç—å %s –Ω–∞ %s", a, b, exc_info=True)
        return None

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã
    result = divide(10, 0)
    if result is None:
        print("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –¥–µ–ª–µ–Ω–∏—è ‚Äî —Å–º–æ—Ç—Ä–∏—Ç–µ details –≤ error.log")
    else:
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç:", result)
